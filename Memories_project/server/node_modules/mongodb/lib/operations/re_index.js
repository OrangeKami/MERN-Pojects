'use strict';

<<<<<<< HEAD
const Aspect = require('./operation').Aspect;
const defineAspects = require('./operation').defineAspects;
const CommandOperationV2 = require('./command_v2');
const serverType = require('../core/sdam/common').serverType;
const ServerType = require('../core/sdam/common').ServerType;
const MongoError = require('../core').MongoError;

class ReIndexOperation extends CommandOperationV2 {
  constructor(collection, options) {
    super(collection, options);
    this.collectionName = collection.collectionName;
  }

  execute(server, callback) {
    if (serverType(server) !== ServerType.Standalone) {
      callback(new MongoError(`reIndex can only be executed on standalone servers.`));
      return;
    }
    super.executeCommand(server, { reIndex: this.collectionName }, (err, result) => {
      if (err) {
        callback(err);
        return;
      }
      callback(null, !!result.ok);
=======
const CommandOperation = require('./command');
const handleCallback = require('../utils').handleCallback;

class ReIndexOperation extends CommandOperation {
  constructor(collection, options) {
    super(collection.s.db, options, collection);
  }

  _buildCommand() {
    const collection = this.collection;

    const cmd = { reIndex: collection.collectionName };

    return cmd;
  }

  execute(callback) {
    super.execute((err, result) => {
      if (callback == null) return;
      if (err) return handleCallback(callback, err, null);
      handleCallback(callback, null, result.ok ? true : false);
>>>>>>> 3ac36cf94fbdaf2987fe4adaae23b41d0f225e10
    });
  }
}

<<<<<<< HEAD
defineAspects(ReIndexOperation, [Aspect.EXECUTE_WITH_SELECTION]);

=======
>>>>>>> 3ac36cf94fbdaf2987fe4adaae23b41d0f225e10
module.exports = ReIndexOperation;
